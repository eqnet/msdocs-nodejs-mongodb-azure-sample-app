#!/usr/bin/env node

const { getApp } = require('../app');
const debug = require('debug')('todolist:server');
const http = require('http'); // STEVE

// const https = require('https'); // STEVE
// const fs = require('fs'); // STEVE

/**
 * Create HTTP server.
 */
getApp().then(app => {
  const port = app.get('port');
  const server = http.createServer(app).listen(port); // STEVE

  // const server = https
  //   .createServer(
  //     {
  //       cert: fs.readFileSync('./localhost.pem'),
  //       key: fs.readFileSync('./localhost-key.pem'),
  //     },
  //     app
  //   )
  //   .listen(443); // STEVE

  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    const addr = server.address();
    const bind =
      typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
});
